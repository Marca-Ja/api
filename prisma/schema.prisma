generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum MaritalState {
  SINGLE
  MARRIED
  DIVORCED
  WINDOWED
  SEPARATED
  IN_CIVIL_UNION
}

enum Status {
  APROVED
  CANCELED
  PENDING
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  CASH
}

enum ServicePreference {
  ONLINE
  PRESENCIAL
  ALL
}

model User {
  id           String        @id @unique @default(uuid())
  id           String        @id @unique @default(uuid())
  name         String
  socialName   String?
  lastName     String
  email        String        @unique
  socialName   String?
  lastName     String
  email        String        @unique
  password     String
  cellphone    String?
  postalCode   String?
  city         String?
  state        String?
  street       String?
  bornedAt     String?       @map("borned_at")
  maritalState MaritalState? @map("marital_state")
  receiveNews  Boolean?      @default(true) @map("receive_news")
  role         String        @default("User")
  createdAt    DateTime?     @default(now()) @map("created_at")
  updatedAt    DateTime?     @updatedAt @map("update_at")

  specialties  Specialty[]
  appointments Appointment[]

  @@map("users")
}

model Specialty {
  id        String   @id @unique @default(uuid())
  specialty String
  createdAt DateTime @default(now()) @map("created_at")

  users   User[]
  doctors Doctor[]

  @@map("specialties")
}

model Doctor {
  id                String            @id @unique @default(uuid())
  email             String            @unique
  firstName         String
  lastName          String
  university        String?
  bornedAt          String?           @map("borned_at")
  email             String            @unique
  firstName         String
  lastName          String
  university        String?
  bornedAt          String?           @map("borned_at")
  servicePreference ServicePreference @default(ALL) @map("service_preference")
  createdAt         DateTime          @default(now())
  specialty         Specialty?        @relation(fields: [specialtyId], references: [id])
  specialtyId       String?
  Appointment       Appointment[]
  role              String            @default("Doctor")
  createdAt         DateTime          @default(now())
  specialty         Specialty?        @relation(fields: [specialtyId], references: [id])
  specialtyId       String?
  Appointment       Appointment[]
  role              String            @default("Doctor")

  @@map("doctors")
}

model Appointment {
  id            String         @id @unique @default(uuid())
  createdAt     DateTime       @default(now()) @map("created_at")
  status        Status?        @default(PENDING)
  paymentMethod PaymentMethod? @map("payment_method")
  scheduledAt   DateTime       @map("scheduled_at")

  doctorId String @map("doctor_id")
  doctor   Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @map("user_id")

  @@map("appointments")
}
